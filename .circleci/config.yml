version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: cd ./frontend
      - run: ls
      - run:
          name: Install front-end Package
          command: |
            cd frontend && npm i
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend && npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install Back-end Package
          command: |
            cd backend
            npm i
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Build Back-end
          command: |
            cd backend
            npm run build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm i
            # npm audit fix --audit-level=critical --force
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
      - slack/notify:
          channel: circlecialert
          event: fail
          mentions: "@Balogun"
          template: basic_fail_1
      - slack/notify:
          channel: circlecialert
          event: pass
          mentions: "@Balogun"
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm i
            # npm audit fix --force
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
      - slack/notify:
          channel: circlecialert
          event: fail
          mentions: '"@Balogun"'
          template: basic_fail_1

      - slack/notify:
          channel: circlecialert
          event: pass
          mentions: '"@Balogun"'
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: ls
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: ls 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
             --query "Exports[?Name==\`EC2InstanceDNSName\`].Value" --no-paginate --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - run: exit 1
      # - destroy-environment:
      #     id: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      # - destroy-environment:
      #     id: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["08:b9:8b:c4:40:76:3e:95:8c:98:44:2d:75:ec:10:bf"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --update ansible openssh
   
      - run: ls
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ls
            ansible-playbook -i inventory.txt configure-server.yml
      #Here's where you will add some code to rollback on 
      - run: 
          name: Install Aws-Cli
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
            aws --version
      - run: exit 1
      - destroy-environment:
          id: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          id: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}failure  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          # context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]